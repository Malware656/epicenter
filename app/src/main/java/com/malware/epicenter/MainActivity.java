package com.malware.epicenter;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.Toolbar;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentManager;
import androidx.fragment.app.FragmentTransaction;

import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;

import com.google.android.material.bottomnavigation.BottomNavigationView;
import com.malware.epicenter.databinding.ActivityMainBinding;
import com.malware.epicenter.fragment.SettingsFragment;
import com.malware.epicenter.fragment.FolderFragment;

public class MainActivity extends AppCompatActivity {
    BottomNavigationView bottomNavigationView;
    Toaster toaster;
    private final Fragment androidFragment = new FolderFragment();
    private final Fragment settingsFragment = new SettingsFragment();
    Fragment active;
    private ActivityMainBinding binding;
    private AuthFunction authFunction;
    String TAG = MainActivity.class.getSimpleName();
    private HelperFunction helperFunction;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        binding = ActivityMainBinding.inflate(getLayoutInflater());
        Toolbar toolbar = binding.toolbar;
        setContentView(binding.getRoot());

        authFunction = new AuthFunction(this);
        toaster = new Toaster(this);
        bottomNavigationView = binding.bottomNavigation;
        helperFunction = new HelperFunction();

        setSupportActionBar(toolbar);
        renderFragment(androidFragment, "android");
        active = androidFragment;
        bottomNavigationView.setOnItemSelectedListener(
                item -> {
                    Log.e(TAG, "onCreate: " + active );
                    if(item.getItemId() == R.id.action_android){
                        renderFragment(androidFragment, "android");
                        return true;
                    }
                    else if(item.getItemId() == R.id.action_settings){
                        renderFragment(settingsFragment, "settings");
                        return true;
                    }
                    return false;
                }
        );
    }

    private void renderFragment(Fragment fragment, String tag){
        FragmentManager fragmentManager = getSupportFragmentManager();
        if(fragment.isAdded()){
            fragmentManager.beginTransaction().hide(active).show(fragment)
                    .setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN).commit();
        }
        else {
            if(active != null){
                fragmentManager.beginTransaction()
                        .add(R.id.fragment_container_view, fragment, tag)
                        .hide(active)
                        .setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN).commit();
            }
            else {
                fragmentManager.beginTransaction()
                        .add(R.id.fragment_container_view, fragment, tag)
                        .setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE).commit();
            }
        }
        active = fragment;
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        MenuInflater menuInflater = getMenuInflater();
        menuInflater.inflate(R.menu.main_menu, menu);
        return super.onCreateOptionsMenu(menu);
    }

    @Override
    public boolean onOptionsItemSelected(@NonNull MenuItem item) {
        if (item.getItemId() == R.id.logout){
            helperFunction.logoutAlert(this);
        }
        return super.onOptionsItemSelected(item);
    }

    @Override
    public void onBackPressed() {
        if(getSupportFragmentManager().getBackStackEntryCount() != 0){
            super.onBackPressed();
        }
        else {
            helperFunction.exitAlert(this);
        }
    }
}