package com.malware.epicenter.fragment;

import static com.google.android.gms.auth.api.signin.GoogleSignIn.hasPermissions;

import android.Manifest;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.provider.Settings;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.annotation.RequiresApi;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;
import androidx.fragment.app.Fragment;

import com.google.android.material.dialog.MaterialAlertDialogBuilder;
import com.malware.epicenter.HelperFunction;
import com.malware.epicenter.MainActivity;
import com.malware.epicenter.Toaster;
import com.malware.epicenter.databinding.PermissionLayoutBinding;

public class PermissionFragment extends Fragment {
    Toaster toaster;
    HelperFunction helperFunction = new HelperFunction();

    @Override
    public void onStart() {
        super.onStart();
    }

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        PermissionLayoutBinding binding = PermissionLayoutBinding.inflate(inflater, container, false);
        toaster = new Toaster(requireActivity());

        binding.permissionsButton.setOnClickListener(
                l -> getPermissions());
        return binding.getRoot();
    }

    // Permission Handling
    private void getPermissions(){
        if(helperFunction.hasPermission(requireContext())){
            moveToMainScreen();
        }
        else{
            // In api 23 and above we have deny and don't ask again option, so we wouldn't be able to request permissions programatically
            // So to handle that we are using thus shouldShowRequestPermissionRationale method
            if(shouldShowRequestPermissionRationale(Manifest.permission.WRITE_EXTERNAL_STORAGE)){
                showPermissionRequestDialogue();
            }
            else{
                // Requesting permission in old way
                if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.R) {
                    getManageExternalPermission();
                }
                else{
                    ActivityCompat.requestPermissions(
                            requireActivity(), new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, 0);
                }
            }
        }
    }

    void getManageExternalPermission(){
        Intent intent = null;
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.R) {
            intent = new Intent(Settings.ACTION_MANAGE_ALL_FILES_ACCESS_PERMISSION);
        }
        startActivity(intent);
    }

    private void showPermissionRequestDialogue(){
        // To open app setting and to get permission manually
        // Uri params fromParts( schema, chartSequence, fragment )
        // We can also use Uri.parse("package:" + getPackageName()); but dis looks bad
        Intent intent = new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);
        Uri uri = Uri.fromParts("package", requireActivity().getPackageName(), null);
        intent.setData(uri);
        // Simple alert dialog
        new MaterialAlertDialogBuilder(requireContext())
                .setTitle("PERMISSIONS NEEDED")
                .setMessage("Please provide proper permissions before accessing media files")
                .setPositiveButton("Go to settings", (dialogInterface, i) -> {

                    getManageExternalPermission();
                })
                .setNegativeButton(
                        "Exit", (dialogInterface, i) -> System.exit(0)
                ).show();
    }

    private void moveToMainScreen(){
        Intent intent = new Intent(requireContext(), MainActivity.class);
        startActivity(intent);
        requireActivity().finish();
    }

    @Override
    public void onResume() {
        super.onResume();
        Log.e("TAG", "onResume: " + helperFunction.hasPermission(requireContext()) );
        if(helperFunction.hasPermission(requireContext())){
            moveToMainScreen();
        }
    }
}
